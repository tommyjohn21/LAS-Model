%%% Plot threshold generated by Exp1_mini %%%

%% Key for STDP/Threshold Link (Exp no. and dW no.)
key = [495 613 200 358 619 246 681 750 216 70  334 999 583 637 90  210 898 42  963 738 538 575 368 450 53  360 626 760 169 693 771 645 599 566 731 576 797 296 375 840 354 726 657 691 426 628 69  938 864 686 657 77  905 4   195 912 136 530 880 784 782 751 622 481 487 684 805 345 682 435 872 866 265 610 589 549 887 268 314 139 924 633 996 623 541 630 536 705 523 948 222 118 124 61  373 440 338 730 597 736 893; ...
       32  33  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99  100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140];

%% Load dW matrices
% Load average dW matrix
f = dir('~/Desktop/Exp22_mini/');
D = [];
R = [];
for i = 1:numel(f)
    if any(strfind(f(i).name,'Wn')), load([f(i).folder '/' f(i).name]), continue, end
    if ~any(strfind(f(i).name,'.mat')), continue, end
    load([f(i).folder '/' f(i).name])
    assert(d.seizure==1)
    fprintf(['Loading ' f(i).folder '/' f(i).name '...\n'])
    D = cat(3,D,d.dW);
    R = cat(3,R,rot90(d.dW,2));
%     
%     x = ((D(:,:,end)-1).*(Wn>0));
%     
%     X = []; for i = 1:500
%         j = i-50:i+50;
%         X = [X [nan(sum(j<=0),1); x(j(j>0&j<=500),i); nan(sum(j>500),1)]];
%     end
%     
%     F = cat(3,F,full(X).');
end

F = cat(3,D,R);
% A = full(Wn~=0).*(F-1);
A = full(Wn).*(F-1);
B = reshape(A,[size(A,1).*size(A,2) size(A,3)]);
% [c,s,l]=pca(zscore(B));
[c,s,l] = pca(B);
   
%% Load data
P = {};
ST = {};
DW = {};
N = [];
for ix = 1:size(key,2)
    f = ['~/Desktop/Exp_mini/Exp' num2str(key(2,ix)) '_mini/'];
    if ~exist(f,'dir'), continue, end
    f = dir(f);
    o = []; ii=[];
    for i = 1:numel(f)
        if ~any(strfind(f(i).name,'.mat')), continue, end
        load([f(i).folder '/' f(i).name])
        ixb = strfind(f(i).name,'_'); ixe = strfind(f(i).name,'.mat'); ia = str2num(f(i).name(ixb(end)+1:ixe-1)); %if ia>10, ia=ia./10; end
        ii=[ii ia];
        o = [o [d.seizure].'];
    end
    
    [~,i] = sort(ii);
    o = o(:,i);
    p1 = sum(o)./size(o,1);
    st1 = ii(i);
    P = [P {p1}];
    ST = [ST {st1}];
    DW = [DW {F(:,:,key(1,ix))}];
    N = [N key(:,ix)];
end

%% Fit threshold data to sigmoid function
Fit = {};
for ix = 1:numel(P)
    sig = @(x) (1 + exp(-(ST{ix}-x(1))./x(2))).^(-1);
    ofn = @(x) sum((sig(x)-P{ix}).^2);
    fit = fminsearch(ofn,[1.5,1]);
    Fit = [Fit {fit; sig}];
end
thresh = cellfun(@(f)f(1),Fit(1,:));

%% Plot
f = figure; hold on
a = gca;
for ix = 1:numel(P)
    plot(ST{ix},P{ix},'o','MarkerSize',6)
    a.Children(1).MarkerFaceColor = a.Children(1).Color;
    a.Children(1).MarkerEdgeColor = 'k';
    plot(ST{ix},Fit{2,ix}(Fit{1,ix}),'LineWidth',2,'Color',[a.Children(1).MarkerFaceColor 0.25])
end

a.Title.String = 'Probability of seizure';
% a.XLabel.String = 'Stimulation duration (s)';
a.XLabel.String = '\sigma_{S} (noise level, pA)';
a.YLabel.String = 'Probability';
a.FontSize = 18;
a.XLim = [5 20];
a.YLim = [0 1];
figname = 'pseizure';
% saveas(f,['~/Desktop/' figname '.svg'])
% close(f)

%% Overlay thresholds on c1/c2 plot
f = figure;
i = c(:,1)>0;
plot(c(i,1),c(i,2),'k.')
hold on
a = gca;
a.XLim = [0 0.05];
a.YLim = [0 0.05];
grid on
grid(a,'minor')
axis square
a.XLabel.String = 'Component 1';
a.YLabel.String = 'Component 2';
a.Title.String = 'PCA Coordinates';
a.FontSize = 18;

cb = parula(256);
cbi = 5:15/255:20;

idx = 1;
for ii = N(1,:)
   plot(c(ii,1),c(ii,2),'.','Color',cb(dsearchn(cbi.',thresh(idx)),:),'MarkerSize',40)
   idx = idx+1;
end

cb = colorbar;
caxis([5 20])
cb.Label.String = 'Seizure threshold (pA)';


%% Overlay thresholds on c1/c2/c3 plot
f = figure;
i = c(:,1)>0;
plot3(c(i,1),c(i,2),c(i,3),'k.')
hold on
a = gca;
a.XLim = [0 0.05];
a.YLim = [0 0.05];
grid on
grid(a,'minor')
axis square
a.XLabel.String = 'Component 1';
a.YLabel.String = 'Component 2';
a.ZLabel.String = 'Component 3';
a.Title.String = 'PCA Coordinates';
a.FontSize = 18;

cb = parula(256);
cbi = 5:15/255:20;

idx = 1;
for ii = N(1,:)
   plot3(c(ii,1),c(ii,2),c(ii,3),'.','Color',cb(dsearchn(cbi.',thresh(idx)),:),'MarkerSize',40)
   idx = idx+1;
end

cb = colorbar;
caxis([5 20])
cb.Label.String = 'Seizure threshold (pA)';

%% Create c1/c2/c3 gif
h = gcf;
h.Color = [1 1 1];
filename = '~/Desktop/c1-3overlay.gif';
for ix = 0:3:357, view([ix,25])
    frame = getframe(h);
    im = frame2im(frame);
    [imind,cm] = rgb2ind(im,256);
    if ix == 0;
        imwrite(imind,cm,filename,'gif', 'Loopcount',inf,'DelayTime',0);
    else
        imwrite(imind,cm,filename,'gif','WriteMode','append','DelayTime',0);
    end
end

%% Plot with angular colorbar
f = figure; hold on
a = gca;

cb = parula(256);
cbi = 0:pi/2/255:pi/2;
th = atan(c(:,2)./c(:,1));


for ix = 1:numel(P)
    plot(ST{ix},P{ix},'o','MarkerSize',6,'Color',cb(dsearchn(cbi.',th(N(1,ix))),:))
    a.Children(1).MarkerFaceColor = a.Children(1).Color;
    a.Children(1).MarkerEdgeColor = 'k';
    plot(ST{ix},Fit{2,ix}(Fit{1,ix}),'LineWidth',2,'Color',[a.Children(1).MarkerFaceColor 0.25])
end

a.Title.String = 'Probability of seizure';
% a.XLabel.String = 'Stimulation duration (s)';
a.XLabel.String = '\sigma_{S} (noise level, pA)';
a.YLabel.String = 'Probability';
a.FontSize = 18;
a.XLim = [5 20];
a.YLim = [0 1];

cb = colorbar;
caxis([0 pi/2])
cb.Label.String = 'Angle (rad)';
cb.Ticks = [0:pi/4:pi/2];
cb.TickLabels = {'0' '\pi/4' '\pi/2'};

figname = 'pseizure';
% saveas(f,['~/Desktop/' figname '.svg'])
% close(f)

%% Overlay ANGLES on c1/c2 plot
f = figure;
i = c(:,1)>0;
plot(c(i,1),c(i,2),'k.')
hold on
a = gca;
a.XLim = [0 0.05];
a.YLim = [0 0.05];
grid on
grid(a,'minor')
axis square
a.XLabel.String = 'Component 1';
a.YLabel.String = 'Component 2';
a.Title.String = 'PCA Coordinates';
a.FontSize = 18;

cb = parula(256);
cbi = 0:pi/2/255:pi/2;
th = atan(c(:,2)./c(:,1));

for ii = N(1,:)
   plot(c(ii,1),c(ii,2),'.','Color',cb(dsearchn(cbi.',th(ii)),:),'MarkerSize',40)
   idx = idx+1;
end

cb = colorbar;
caxis([0 pi/2])
cb.Label.String = 'Angle (rad)';
cb.Ticks = [0:pi/4:pi/2];
cb.TickLabels = {'0' '\pi/4' '\pi/2'};

%% Overlay thresholds on th/phi plot
i = c(:,1)>0;
th = atan(c(:,2)./c(:,1));
phi = atan(c(:,3)./sqrt(sum(c(:,1:2).^2,2)));

f = figure;
plot(th(i),phi(i),'k.')
hold on
a = gca;
a.XLim = [0 pi/2];
a.YLim = [-pi/2 pi/2];
grid on
grid(a,'minor')
axis square
a.XLabel.String = 'Theta (rad)';
a.YLabel.String = 'Phi (rad)';
a.Title.String = 'Angular PCA Coordinates';
a.FontSize = 18;
a.XTick = [0 pi/4 pi/2];
a.XTickLabel = {'0' '\pi/4' '\pi/2'};
a.YTick = [-pi/2 0 pi/2];
a.YTickLabel = {'-\pi/2' '0' '\pi/2'};


cb = parula(256);
cbi = 5:15/255:20;

idx = 1;
for ii = N(1,:)
   plot(th(ii),phi(ii),'.','Color',cb(dsearchn(cbi.',thresh(idx)),:),'MarkerSize',40)
   idx = idx+1;
end

cb = colorbar;
caxis([5 20])
cb.Label.String = 'Seizure threshold (pA)';

%% Gradient exploration
% Operate in N=500 space (instead of N=1000)
T = cellfun(@(x)find(find((1:1000).*i')==x),num2cell(N(1,:)));
% Center data matrix
cn = (c(i,:)'-mean(c(i,:)',2)).'; % Note this is in N=500 space

% SVD
[u,sd,v] = svd(cn(T,1:3).');


%% Fit surface to points with LAR
clear fit
ft = fit(c(i,1:2),c(i,3),'poly11','Robust','LAR');
p1 = [0,1,ft(0,1)].';
p2 = [1,0,ft(1,0)].';
p3 = [0,0,ft(0,0)].';
v1 = p2-p1;
v2 = p3-p1;
v3 = cross(v1,v2);
nv3 = v3./norm(v3); % normalized

% Take a single unit vector (keep component 1)
u1 = [1 1 0].';
u1p = normc(u1 - dot(u1,nv3)*nv3);
u2p = cross(u1p,nv3);

% New bases
nb1 = u1p;
nb2 = u2p;
nb3 = nv3;
A = [nb1,nb2,nb3]; % Tranition matrix

%% Coeffs for plane exploration
cmn = c(:,1:3) - mean(c(:,1:3));
% coeffs = [c(N(1,:),1:3) ones(numel(N(1,:)),1)]\thresh';
coeffs = [cmn(N(1,:),:) ones(numel(N(1,:)),1)]\thresh';
pts = cellfun(@(x) [min(cmn(i,x)):((max(cmn(i,x))-min(cmn(i,x)))/199):max(cmn(i,x))],num2cell(1:3),'un',0);
[x,y,z] = meshgrid(pts{1},pts{2},pts{3});
T = reshape([x(:) y(:) z(:) ones(size(x(:)))]*coeffs,size(x));
[dx,dy,dz] = gradient(T,pts{1},pts{2},pts{3});
u1 = normc([dx(1); dy(1); dz(1)]);
V = normc(cov(c(i,1:3)));
u2 = normc(V(:,1) - u1*(dot(u1,V(:,1))));
u3 = cross(u1,u2);
M = [u1 u2 u3]';

% Project onto u1 and u2 and create linear model
g = [c(N(1,:),1:3)*[u1 u2], ones(numel(N(1,:)),1)]\thresh';