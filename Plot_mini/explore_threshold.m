%%% Plot threshold generated by Exp1_mini %%%

%% Key for STDP/Threshold Link (Exp no. and dW no.)
key = [495 613 200 358 619 246 681 750 216 70 334 999 583 637 90  210 898 42  963 738 538 575; ...
       32  33  42  43  44  45  46  47  48  49 50  51  52  53  54  55  56  57  58  59  60  61];

%% Load dW matrices
% Load average dW matrix
f = dir('~/Desktop/Exp22_mini/');
D = [];
R = [];
for i = 1:numel(f)
    if any(strfind(f(i).name,'Wn')), load([f(i).folder '/' f(i).name]), continue, end
    if ~any(strfind(f(i).name,'.mat')), continue, end
    load([f(i).folder '/' f(i).name])
    assert(d.seizure==1)
    fprintf(['Loading ' f(i).folder '/' f(i).name '...\n'])
    D = cat(3,D,d.dW);
    R = cat(3,R,rot90(d.dW,2));
%     
%     x = ((D(:,:,end)-1).*(Wn>0));
%     
%     X = []; for i = 1:500
%         j = i-50:i+50;
%         X = [X [nan(sum(j<=0),1); x(j(j>0&j<=500),i); nan(sum(j>500),1)]];
%     end
%     
%     F = cat(3,F,full(X).');
end

F = cat(3,D,R);
A = full(Wn~=0).*(F-1);
B = reshape(A,[size(A,1).*size(A,2) size(A,3)]);
[c,s,l]=pca(zscore(B));
   
%% Load data
P = {};
ST = {};
DW = {};
N = [];
for ix = 1:size(key,2)
    f = ['~/Desktop/Exp' num2str(key(2,ix)) '_mini/'];
    if ~exist(f,'dir'), continue, end
    f = dir(f);
    o = []; ii=[];
    for i = 1:numel(f)
        if ~any(strfind(f(i).name,'.mat')), continue, end
        load([f(i).folder '/' f(i).name])
        ixb = strfind(f(i).name,'_'); ixe = strfind(f(i).name,'.mat'); ia = str2num(f(i).name(ixb(end)+1:ixe-1)); %if ia>10, ia=ia./10; end
        ii=[ii ia];
        o = [o [d.seizure].'];
    end
    
    [~,i] = sort(ii);
    o = o(:,i);
    p1 = sum(o)./size(o,1);
    st1 = ii(i);
    P = [P {p1}];
    ST = [ST {st1}];
    DW = [DW {F(:,:,key(1,ix))}];
    N = [N key(:,ix)];
end

%% Fit threshold data to sigmoid function
Fit = {};
for ix = 1:numel(P)
    sig = @(x) (1 + exp(-(ST{ix}-x(1))./x(2))).^(-1);
    ofn = @(x) sum((sig(x)-P{ix}).^2);
    fit = fminsearch(ofn,[1.5,1]);
    Fit = [Fit {fit; sig}];
end
thresh = cellfun(@(f)f(1),Fit(1,:));

%% Plot
f = figure; hold on
a = gca;
for ix = 1:numel(P)
    plot(ST{ix},P{ix},'o','MarkerSize',6)
    a.Children(1).MarkerFaceColor = a.Children(1).Color;
    a.Children(1).MarkerEdgeColor = 'k';
    plot(ST{ix},Fit{2,ix}(Fit{1,ix}),'LineWidth',2,'Color',[a.Children(1).MarkerFaceColor 0.25])
end

a.Title.String = 'Probability of seizure';
% a.XLabel.String = 'Stimulation duration (s)';
a.XLabel.String = '\sigma_{S} (noise level, pA)';
a.YLabel.String = 'Probability';
a.FontSize = 18;
a.XLim = [5 20];
a.YLim = [0 1];
figname = 'pseizure';
% saveas(f,['~/Desktop/' figname '.svg'])
% close(f)

%% Overlay thresholds on c1/c2 plot
f = figure;
i = c(:,1)>0;
plot(c(i,1),c(i,2),'k.')
hold on
a = gca;
a.XLim = [0 0.05];
a.YLim = [0 0.05];
grid on
grid(a,'minor')
axis square
a.XLabel.String = 'Component 1';
a.YLabel.String = 'Component 2';
a.Title.String = 'PCA Coordinates';
a.FontSize = 18;

cb = parula(256);
cbi = 5:15/255:20;

idx = 1;
for ii = N(1,:)
   plot(c(ii,1),c(ii,2),'.','Color',cb(dsearchn(cbi.',thresh(idx)),:),'MarkerSize',40)
   idx = idx+1;
end

cb = colorbar;
caxis([5 20])
cb.Label.String = 'Noise threshold (pA)';


%% Overlay thresholds on c1/c2/c3 plot
f = figure;
i = c(:,1)>0;
plot3(c(i,1),c(i,2),c(i,3),'k.')
hold on
a = gca;
a.XLim = [0 0.05];
a.YLim = [0 0.05];
grid on
grid(a,'minor')
axis square
a.XLabel.String = 'Component 1';
a.YLabel.String = 'Component 2';
a.ZLabel.String = 'Component 3';
a.Title.String = 'PCA Coordinates';
a.FontSize = 18;

cb = parula(256);
cbi = 5:15/255:20;

idx = 1;
for ii = N(1,:)
   plot3(c(ii,1),c(ii,2),c(ii,3),'.','Color',cb(dsearchn(cbi.',thresh(idx)),:),'MarkerSize',40)
   idx = idx+1;
end

cb = colorbar;
caxis([5 20])
cb.Label.String = 'Noise threshold (pA)';

%% Create c1/c2/c3 gif
h = gcf;
h.Color = [1 1 1];
filename = '~/Desktop/c1-3overlay.gif';
for ix = 0:3:357, view([ix,25])
    frame = getframe(h);
    im = frame2im(frame);
    [imind,cm] = rgb2ind(im,256);
    if ix == 0;
        imwrite(imind,cm,filename,'gif', 'Loopcount',inf,'DelayTime',0);
    else
        imwrite(imind,cm,filename,'gif','WriteMode','append','DelayTime',0);
    end
end

%% Plot with angular colorbar
f = figure; hold on
a = gca;

cb = parula(256);
cbi = 0:pi/2/255:pi/2;
th = atan(c(:,2)./c(:,1));


for ix = 1:numel(P)
    plot(ST{ix},P{ix},'o','MarkerSize',6,'Color',cb(dsearchn(cbi.',th(N(1,ix))),:))
    a.Children(1).MarkerFaceColor = a.Children(1).Color;
    a.Children(1).MarkerEdgeColor = 'k';
    plot(ST{ix},Fit{2,ix}(Fit{1,ix}),'LineWidth',2,'Color',[a.Children(1).MarkerFaceColor 0.25])
end

a.Title.String = 'Probability of seizure';
% a.XLabel.String = 'Stimulation duration (s)';
a.XLabel.String = '\sigma_{S} (noise level, pA)';
a.YLabel.String = 'Probability';
a.FontSize = 18;
a.XLim = [5 20];
a.YLim = [0 1];

cb = colorbar;
caxis([0 pi/2])
cb.Label.String = 'Angle (rad)';
cb.Ticks = [0:pi/4:pi/2];
cb.TickLabels = {'0' '\pi/4' '\pi/2'};

figname = 'pseizure';
% saveas(f,['~/Desktop/' figname '.svg'])
% close(f)

%% Overlay ANGLES on c1/c2 plot
f = figure;
i = c(:,1)>0;
plot(c(i,1),c(i,2),'k.')
hold on
a = gca;
a.XLim = [0 0.05];
a.YLim = [0 0.05];
grid on
grid(a,'minor')
axis square
a.XLabel.String = 'Component 1';
a.YLabel.String = 'Component 2';
a.Title.String = 'PCA Coordinates';
a.FontSize = 18;

cb = parula(256);
cbi = 0:pi/2/255:pi/2;
th = atan(c(:,2)./c(:,1));

for ii = N(1,:)
   plot(c(ii,1),c(ii,2),'.','Color',cb(dsearchn(cbi.',th(ii)),:),'MarkerSize',40)
   idx = idx+1;
end

cb = colorbar;
caxis([0 pi/2])
cb.Label.String = 'Angle (rad)';
cb.Ticks = [0:pi/4:pi/2];
cb.TickLabels = {'0' '\pi/4' '\pi/2'};

%% Overlay thresholds on th/phi plot
i = c(:,1)>0;
th = atan(c(:,2)./c(:,1));
phi = atan(c(:,3)./sqrt(sum(c(:,1:2).^2,2)));

f = figure;
plot(th(i),phi(i),'k.')
hold on
a = gca;
a.XLim = [0 pi/2];
a.YLim = [-pi/2 pi/2];
grid on
grid(a,'minor')
axis square
a.XLabel.String = 'Theta (rad)';
a.YLabel.String = 'Phi (rad)';
a.Title.String = 'Angular PCA Coordinates';
a.FontSize = 18;
a.XTick = [0 pi/4 pi/2];
a.XTickLabel = {'0' '\pi/4' '\pi/2'};
a.YTick = [-pi/2 0 pi/2];
a.YTickLabel = {'-\pi/2' '0' '\pi/2'};


cb = parula(256);
cbi = 5:15/255:20;

idx = 1;
for ii = N(1,:)
   plot(th(ii),phi(ii),'.','Color',cb(dsearchn(cbi.',thresh(idx)),:),'MarkerSize',40)
   idx = idx+1;
end

cb = colorbar;
caxis([5 20])
cb.Label.String = 'Noise threshold (pA)';
