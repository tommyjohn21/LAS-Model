function Run(E)
% Run the experiment stored in the Experiment object
%
% Workflow:
% 1. Generate Experiment object:
%       a. E = StimulationExperiment(ExperimentName)
%       b. manipulate E.param as needed
% 2. Initialize Simulation and Simulation parameters to use in Experiment
%    and Prepare Simulation to generate Network object with network
%    parameters:
%       a. S = Simulation(SimulationTemplate);  % Load simulation parameters
%       b. manipulate S.param as needed
%       c. Prepare(S);                          % Generate network prior to simulation
%       d. manipulate S.O (Network) as needed
% 3. Asign Simulation to Experiment and Run Experiment:
%       a. E.S = S;
%       b. Run(E);

% This script was generated by copying an earlier version of the
% ThresholdExperiment/Run code. The last version of that earlier
% ThresholdExperiment/Run script was in commit
% 39ff4f86f6d61cab470736dccda94a352a9eed9d. You have since transitioned
% that ThresholdExperiment/Run code to run *Simulations* in parallel and
% not *levels of background noise*. You may want to update this script in
% the same manner for computational efficiency.
warning(['This StimulationExperiment/Run script was generated from a legacy version of ThresholdExperiment/Run. '...
    'You may want to update this script like the new ThresholdExperiment/Run script, '...
    'so that Simulations are run in parallel (instead of running levels of background noise in parallel). '...
    'See also the comment in the code above this warning.'])

% Reset simulation if needed
if E.S.O.t>0, Reset(E.S); end

% Create ExpDir if doesn't exist
if ~exist(E.param.expdir,'dir'), mkdir(E.param.expdir); end

%%% Conditional parallel computation %%%
% Grand data concatenation for passage in parfor
%%% Make sure each pulse train has an associated pulsenum field
warning('You may want to add an E.InputsExpanded field to simplify this conditional for more human readable flow control (c.f. E.S.prepared)')
if ~E.param.flags.SpecifyInputs % this is the case when you have provided parameter ranges
    inputs = ExpandInputs(E);
elseif any(arrayfun(@(input) ~isfield(input,'pulsenum'),E.param.inputs)) % this is the case when at least one of the input structures does not have a pulsenum field (and hasn't been validated)
    % Assert all included input settings are valid
    assert(all(arrayfun(@(input)CheckStimValidity(input,E),E.param.inputs)),'At least one of the inputs given in E.param.inputs is not valid. Find out which, and remove it.')
    % Add in pulsenum field to each input
  inputs = arrayfun(@(input) E.GetPulseNum(input),E.param.inputs);
else % this is the case when all inputs have already been Expanded and have pulsenum fields
    inputs = E.param.inputs; 
end
SE = cellfun(@(x)copy(E),num2cell(1:numel(inputs)),'un',0);
if E.param.server || E.param.flags.parallel
    parfor (i = 1:numel(inputs)), ExecuteSimulations(SE{i},inputs(i)); end
else
    for i = 1:numel(inputs), ExecuteSimulations(SE{i},inputs(i)); end
end
end

function ExecuteSimulations(SE,input)

        % Pull local Simulation handle
        S = SE.S;
        
        % Substitute local input parameters
        for i = 1:numel(S.O.Ext)
            if strcmp(SE.S.O.Ext(i).UserData.ExternalInputType,'default')
                % Overwrite the 'default' ExternalInput with the input
                % parameters defined by SE, the StimulationExperiment.
                % leave other 'custom' ExternalInput unaltered
                SE.S.O.Ext(i).Deterministic = @(x,t) EvaluateStimulation(SE,input,x,t);
            end
        end

        % Initialize output structures
        detector = []; % Empty detector for concatenation
        seed = []; % Empty seed container for concatenation
        if S.param.flags.realtimeSTDP
            dW = []; % Empty dW container for concatenation
        end
        
        
        % Skip Simulation if already performed
        FileName = sprintf([SE.param.expdir 'StimulationExperiment-Input-'...
            strjoin(compose('%X',floor(100*[input.frequency input.magnitude input.pulsewidth input.pulsenum])),'.')...
            '.mat']); % Filename in composed in hexadecimal for unique file identifier
        if exist(FileName,'file'), return, end
        
        % Run simulations
        for j = 1:SE.param.n
            fprintf('%i pulses, %i pA, %i ms, %i Hz: simulation %i of %i\n',input.pulsenum,input.magnitude,input.pulsewidth,input.frequency,j,SE.param.n)
            Run(S)
            detector = [detector S.detector]; % Append detector from each simulation
            seed = [seed S.seed]; % Retain seeds used in each simulation
            if S.param.flags.realtimeSTDP, dW =  cat(3,dW,S.O.Proj.Out(1).STDP.W); end % Record dW matrix if realtimeSTDP enabled
            Reset(S)
        end
        
        % Append completed results
        SE.S.detector = detector;
        SE.S.seed = seed;
        if S.param.flags.realtimeSTDP, SE.S.O.Proj.Out(1).STDP.W = dW; end
        
        % Save Stimulation settings
        SE.S.param.input.Stimulation = input;

        % Save output
        parsave(FileName,SE)

end

function parsave(FileName,E)
    disp(['Saving ' FileName])
    save(FileName, 'E', '-v7.3')
end
